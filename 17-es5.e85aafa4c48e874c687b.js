(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{wtaK:function(l,n,e){"use strict";e.r(n);var t=e("CcnG"),o=function(){function l(){}return l.prototype.ngOnInit=function(){},l}(),a=function(){return function(){}}(),i=e("pMnS"),u=e("oBZk"),r=e("ZZ/e"),s=t.rb({encapsulation:0,styles:[[""]],data:{}});function c(l){return t.Jb(0,[(l()(),t.tb(0,0,null,null,10,"ion-header",[],null,null,null,u.K,u.m)),t.sb(1,49152,null,0,r.y,[t.h,t.k,t.z],null,null),(l()(),t.tb(2,0,null,0,8,"ion-toolbar",[],null,null,null,u.V,u.x)),t.sb(3,49152,null,0,r.yb,[t.h,t.k,t.z],null,null),(l()(),t.tb(4,0,null,0,3,"ion-buttons",[["slot","start"]],null,null,null,u.A,u.c)),t.sb(5,49152,null,0,r.i,[t.h,t.k,t.z],null,null),(l()(),t.tb(6,0,null,0,1,"ion-menu-button",[],null,null,null,u.P,u.s)),t.sb(7,49152,null,0,r.O,[t.h,t.k,t.z],null,null),(l()(),t.tb(8,0,null,0,2,"ion-title",[],null,null,null,u.U,u.w)),t.sb(9,49152,null,0,r.wb,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Research"])),(l()(),t.tb(11,0,null,null,172,"ion-content",[],null,null,null,u.I,u.k)),t.sb(12,49152,null,0,r.r,[t.h,t.k,t.z],null,null),(l()(),t.tb(13,0,null,0,17,"ion-card",[],null,null,null,u.F,u.d)),t.sb(14,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(15,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(16,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(17,0,null,0,2,"ion-card-title",[["style","font-size:2em;"]],null,null,null,u.E,u.h)),t.sb(18,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Learning Locomotion using a Keyframe-based System"])),(l()(),t.tb(20,0,null,0,10,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(21,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(22,0,null,0,2,"ion-card-subtitle",[["style","font-size:1.5em;"]],null,null,null,u.D,u.g)),t.sb(23,49152,null,0,r.m,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Ethan Wilson"])),(l()(),t.tb(25,0,null,0,2,"ion-card-subtitle",[["style","font-size:1.5em;"]],null,null,null,u.D,u.g)),t.sb(26,49152,null,0,r.m,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Greg Turk"])),(l()(),t.tb(28,0,null,0,2,"ion-card-subtitle",[["style","font-size:1.5em;"]],null,null,null,u.D,u.g)),t.sb(29,49152,null,0,r.m,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Yunbo Zhang"])),(l()(),t.tb(31,0,null,0,5,"ion-card",[["button","true"],["color","tertiary"],["download","draft.docx"],["href","assets/loco/draft.docx"]],null,null,null,u.F,u.d)),t.sb(32,49152,null,0,r.j,[t.h,t.k,t.z],{button:[0,"button"],color:[1,"color"],download:[2,"download"],href:[3,"href"]},null),(l()(),t.tb(33,0,null,0,3,"ion-card-content",[["style","text-align:center;"]],null,null,null,u.B,u.e)),t.sb(34,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(35,0,null,0,1,"h2",[],null,null,null,null,null)),(l()(),t.Ib(-1,null,["Download Paper"])),(l()(),t.tb(37,0,null,0,15,"ion-card",[],null,null,null,u.F,u.d)),t.sb(38,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(39,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(40,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(41,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(42,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Introduction"])),(l()(),t.tb(44,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(45,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nAnimated motion of a digital character / model is derived from a few different methods which depend on the simulation environment. Traditional animation, applied in video games, animated film, etc., keeps a record of keyframes, or values for the rotation of joints within a model's underlying skeleton. These keyframes correspond to different points in time, and the program interpolates between them to generate the animation. These keyframes are typically either animated by hand or obtained through motion capture technology. "])),(l()(),t.tb(47,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(48,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nAnimations that must conform to the laws of physics, i.e. existing within physics simulations, must be animated in a different manner. Real humans / creatures perform an infinite amount of subconscious motions to preserve balance and save energy, but it would take an exorbitant amount of time for a human animator to replicate those balance changes using keyframes in a physical simulation. Without those corrections, realistic-looking animation loops might lose their stability over time, resulting in the agent falling over, and successfully human-animated motion would likely look robotic or simulated. "])),(l()(),t.tb(50,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(51,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nMy goal was to create a physics-based animation system that could import custom models and generate stable walk cycles [i.e. completing multiple cycles without falling over, yet still moving in the forward direction] within an affordable amount of time. "])),(l()(),t.tb(53,0,null,0,7,"ion-card",[["color","secondary"]],null,null,null,u.F,u.d)),t.sb(54,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(55,0,null,0,5,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(56,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(57,0,null,0,3,"ion-card",[["color","dark"],["style","padding:10px"]],null,null,null,u.F,u.d)),t.sb(58,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(59,0,null,0,1,"video",[["controls","controls"],["style","display:block;width:100%;height:auto;margin-left:auto;margin-right:auto;"]],null,null,null,null,null)),(l()(),t.tb(60,0,null,null,0,"source",[["src","assets/loco/video/quad_good_walk.mp4"],["type","video/mp4"]],null,null,null,null,null)),(l()(),t.tb(61,0,null,0,12,"ion-card",[],null,null,null,u.F,u.d)),t.sb(62,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(63,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(64,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(65,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(66,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Related Work"])),(l()(),t.tb(68,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(69,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,['\nTraditionally, the solution for animating with respect to physical constraints has been to employ some heuristic optimization algorithm. Heuristic algorithms do not search for a single perfect solution; instead they approximate a solution that is "good enough" and can be found in a reasonable amount of time. These algorithms are especially effective in locomotion because of the large problem space (there are infinite variations of acceptable forms of locomotion). Evolutionary algorithms work particularly well as they tend to avoid local maxima and can indefinitely continue searching for a more efficient solution. For example, Kodjabachian used an evolutionary approach to build a neural network controller for simulated two-dimensional insects. These insects were able to learn locomotion and perform higher level behaviors, such as obstacle avoidance and an odor-gradient food detection system[1]. '])),(l()(),t.tb(71,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(72,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nRecent improvements in computational technology have opened the gateway to apply more computationally expensive algorithms. Reinforcement learning (RL), a subset of machine learning that balances an agent's environmental exploration vs. exploitation, has become an especially popular method. There are various existing implementations of RL locomotion training, and some have extended functionality for various scenarios. An example is Simbicon, a three-dimensional biped locomotion controller that incorporated the ability to react to varied terrain and outside forces[2]. However, these solutions remain too computationally expensive to perform without a dedicated setup. While a research lab might be able to afford a week of training on a dedicated multi-GPU system, I am restricted to using a mid-range laptop. "])),(l()(),t.tb(74,0,null,0,7,"ion-card",[["color","secondary"]],null,null,null,u.F,u.d)),t.sb(75,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(76,0,null,0,5,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(77,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(78,0,null,0,3,"ion-card",[["color","dark"],["style","padding:10px"]],null,null,null,u.F,u.d)),t.sb(79,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(80,0,null,0,1,"video",[["controls","controls"],["style","display:block;width:100%;height:auto;margin-left:auto;margin-right:auto;"]],null,null,null,null,null)),(l()(),t.tb(81,0,null,null,0,"source",[["src","assets/loco/video/crab_run.mp4"],["type","video/mp4"]],null,null,null,null,null)),(l()(),t.tb(82,0,null,0,9,"ion-card",[],null,null,null,u.F,u.d)),t.sb(83,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(84,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(85,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(86,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(87,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["My Approach"])),(l()(),t.tb(89,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(90,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nMy implementation used a Genetic Algorithm (GA), an evolutionary algorithm in which various DNA compete within a population that evolves over time. In order to save computation time and limit the problem's search space, I opted to model my DNA after the keyframe system present in traditional animation. Thus, my solution is prone to the problems animators face (discussed in the introduction), but it is able to achieve significantly more precise values than any human animator could. "])),(l()(),t.tb(92,0,null,0,7,"ion-card",[["color","secondary"]],null,null,null,u.F,u.d)),t.sb(93,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(94,0,null,0,5,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(95,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(96,0,null,0,3,"ion-card",[["color","dark"],["style","padding:10px"]],null,null,null,u.F,u.d)),t.sb(97,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(98,0,null,0,1,"video",[["controls","controls"],["style","display:block;width:100%;height:auto;margin-left:auto;margin-right:auto;"]],null,null,null,null,null)),(l()(),t.tb(99,0,null,null,0,"source",[["src","assets/loco/video/tall_walk.mp4"],["type","video/mp4"]],null,null,null,null,null)),(l()(),t.tb(100,0,null,0,21,"ion-card",[],null,null,null,u.F,u.d)),t.sb(101,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(102,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(103,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(104,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(105,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Skel Controller within DART"])),(l()(),t.tb(107,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(108,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nThe physics simulation I chose to use was the Dynamic Animation and Robotics Toolkit (DART). DART is an open-source library that was written at the Georgia Institute of Technology collaboratively by the Graphics Lab and Humanoid Robotics Lab[3]. I chose DART both because it is an ideal environment for simulating rigid body systems and because of my advisors' experience with the program. "])),(l()(),t.tb(110,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(111,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nDART's functionality includes a customizable controller for every rigid body entity within the simulation. This controller can be used to dynamically apply torque to the joints of the rigid body during the simulation's runtime. The controller I implemented was an extension of the Stable Proportional-Derivative (SPD) controller[4]. In the context of a rigidbody system, a SPD controller provides stable tracking to a target pose. This is achieved by applying a control force to the rigid body's joints, computed using the joint's current kinematics, the target position, and the simulation's timestep. A proportional gain (tracking strength) and derivative gain (damping strength) are included in the equation used and can be changed to tweak the tracking intensity. SPD controllers differ from traditional Proportional-Derivative (PD) controllers in their calculation; SPD use a computed estimate of the simulation's next time-step rather than the current time-step. This method ensures stability when undergoing large motions or high time steps, whereas the traditional PD controller may break down. "])),(l()(),t.tb(113,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(114,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nMy controller utilizes the SPD controller's computations for all torque calculations. At the initialization phase of the simulation, my controller is fed a list of tracking poses. Then, when applicable, these poses are mirrored and/or interpolated to generate a large cycle of poses for the controller to use. "])),(l()(),t.tb(116,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(117,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nTo mirror a pose, specific values within the pose (referred to as degrees of freedom, explained in-depth in a later section) that map from left to right are transferred to the opposite side, and vice versa. The code to mirror depends on the model at hand. Interpolation can be applied generally to any model. To interpolate, two adjacent poses from within the loop are chosen. Multiple intermediate poses are generated by linearly interpolating between the two chosen poses. These generated poses are then added to a new list which ends up being much larger. This process is repeated between each adjacent pair of poses, with the interpolated poses being added to the same new list, which finally replaces the initial list of poses. "])),(l()(),t.tb(119,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(120,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nAt runtime, the controller tracks to a pose and constantly computes an error value between the model's current position and the pose being tracked. Once this error drops beneath a specific value, the target pose shifts to the next pose in the list. Using error to determine when to track a new pose differs from animation's traditional keyframe approach, where the tracking of keyframes are based completely on time. My approach generated smoother motions than a linear time-based system would; additionally, this system discouraged unexpected behaviors by adding physical constraints to the rigidbody. If a model was unable to reach its next pose (from falling over and being blocked by the ground, or any other reason), it would get stuck, whereas a strictly time-based keyframe system's model would ignore the fact that it was stuck and continue attempting to reach poses, resulting in unnatural, spastic motion. "])),(l()(),t.tb(122,0,null,0,7,"ion-card",[["color","secondary"]],null,null,null,u.F,u.d)),t.sb(123,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(124,0,null,0,5,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(125,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(126,0,null,0,3,"ion-card",[["color","dark"],["style","padding:10px"]],null,null,null,u.F,u.d)),t.sb(127,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(128,0,null,0,1,"video",[["controls","controls"],["style","display:block;width:100%;height:auto;margin-left:auto;margin-right:auto;"]],null,null,null,null,null)),(l()(),t.tb(129,0,null,null,0,"source",[["src","assets/loco/video/quad_mirror_pose.mp4"],["type","video/mp4"]],null,null,null,null,null)),(l()(),t.tb(130,0,null,0,9,"ion-card",[],null,null,null,u.F,u.d)),t.sb(131,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(132,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(133,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(134,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(135,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Genetic Algorithm"])),(l()(),t.tb(137,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(138,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nA genetic algorithm (GA) is a framework for solving optimization problems which is based upon the process of natural selection found in biological evolution. Different solutions to the problem, referred to as genomes, are initially randomly generated by the algorithm. These genomes are stored in a list of fixed size known as the population. The algorithm progresses by alternating between evolutionary and evaluation stages. At each evaluation stage, every genome in the population is tested against a fitness function and given a score which corresponds to how effectively they have solved the problem. The evolutionary stage typically involves a combination of crossover and mutation. Crossover is a process in which two genomes, now known as the parents, are selected from the population and their information is combined to produce some number of children. Mutation takes in a single genome sequence and slightly changes some of its values, creating a slightly different solution to the problem. Crossover and mutations are performed on the population in an effort to produce better solutions that can be used in later generations. At the end of each evolutionary stage, the population, which may contain extra DNA from crossover, must be culled back to its original size. "])),(l()(),t.tb(140,0,null,0,7,"ion-card",[["color","secondary"]],null,null,null,u.F,u.d)),t.sb(141,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(142,0,null,0,5,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(143,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.tb(144,0,null,0,3,"ion-card",[["color","dark"],["style","padding:10px"]],null,null,null,u.F,u.d)),t.sb(145,49152,null,0,r.j,[t.h,t.k,t.z],{color:[0,"color"]},null),(l()(),t.tb(146,0,null,0,1,"video",[["controls","controls"],["style","display:block;width:100%;height:auto;margin-left:auto;margin-right:auto;"]],null,null,null,null,null)),(l()(),t.tb(147,0,null,null,0,"source",[["src","assets/loco/video/crab_flipped.mp4"],["type","video/mp4"]],null,null,null,null,null)),(l()(),t.tb(148,0,null,0,35,"ion-card",[],null,null,null,u.F,u.d)),t.sb(149,49152,null,0,r.j,[t.h,t.k,t.z],null,null),(l()(),t.tb(150,0,null,0,4,"ion-card-header",[],null,null,null,u.C,u.f)),t.sb(151,49152,null,0,r.l,[t.h,t.k,t.z],null,null),(l()(),t.tb(152,0,null,0,2,"ion-card-title",[],null,null,null,u.E,u.h)),t.sb(153,49152,null,0,r.n,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["Data Storage"])),(l()(),t.tb(155,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(156,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nI chose to represent my DNA as a list of target poses for the controller within DART to use. Every pose was a list of values, and each value corresponded to the rotation value of one degrees of freedom (DOF) within the model. "])),(l()(),t.tb(158,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(159,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nA model is composed of various body sections, which are connected by joints. There are multiple joint classifications to choose from, with the more complicated joint types having more DOFs. A DOF is a single value that corresponds to one axis of rotation in the world (the axis can be of any orientation, however). The types of joints are as follows: "])),(l()(),t.tb(161,0,null,0,16,"ion-list",[["color","tertiary"],["lines","none"],["style","margin:auto;width:80%;"]],null,null,null,u.O,u.q)),t.sb(162,49152,null,0,r.L,[t.h,t.k,t.z],{lines:[0,"lines"]},null),(l()(),t.tb(163,0,null,0,2,"ion-item",[],null,null,null,u.M,u.o)),t.sb(164,49152,null,0,r.E,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\n1. Revolute joints contain one DOF. An example would be a human\ufffds elbow, which can only rotate along the bicep\ufffds orientation. Notice, however, that as the shoulder moves the elbow\ufffds global rotation also changes, so the revolute joint\ufffds constraint is only local to the body part it is placed on. "])),(l()(),t.tb(166,0,null,0,2,"ion-item",[],null,null,null,u.M,u.o)),t.sb(167,49152,null,0,r.E,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\n2. Universal joints contain two DOFs. An example is the human knee, which can rotate along the thigh\ufffds orientation or rotate slightly along the calf\ufffds axis. It can not rotate all the way around the thigh due to having two axes of rotation in a 3D space. "])),(l()(),t.tb(169,0,null,0,2,"ion-item",[],null,null,null,u.M,u.o)),t.sb(170,49152,null,0,r.E,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\n3. Euler joints contain three DOFs, and can rotate along all axes. An example is the shoulder. Notice that the shoulder still has value constraints. It can rotate along every axis, but the extent of rotation is limited by the person\ufffds flexibility. "])),(l()(),t.tb(172,0,null,0,2,"ion-item",[],null,null,null,u.M,u.o)),t.sb(173,49152,null,0,r.E,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\n4. Free joints connect two separate objects and contain three DOFs for rotation and three DOFs for position. These joints can not be directly manipulated and exist solely to inform the simulation. "])),(l()(),t.tb(175,0,null,0,2,"ion-item",[],null,null,null,u.M,u.o)),t.sb(176,49152,null,0,r.E,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\n5. Weld joints have zero DOFs and rigidly connect two body parts. These help to create more complex geometry by combining primitive shapes. "])),(l()(),t.tb(178,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(179,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nLimiting the number of DOFs on a model would decrease computation time, so models were created creatively to have the simplest combination of joints while still being able to achieve motion similar to the creatures they were modeled after. In addition, I limited the values of these DOFs within the DNA to have a roughly 90 degree range. This restriction acted similarly to a human shoulder in that without constraints, a shoulder would be able to clip into its attached body. This helped to both keep movement natural and to decrease the problem\ufffds search space significantly. "])),(l()(),t.tb(181,0,null,0,2,"ion-card-content",[],null,null,null,u.B,u.e)),t.sb(182,49152,null,0,r.k,[t.h,t.k,t.z],null,null),(l()(),t.Ib(-1,0,["\nTo save additional computation time, for symmetrical models I implemented a mirror system. Each piece of DNA would only contain info for half of a walk cycle, which would then be mirrored over at the beginning of the evaluation phase. This halved the amount of data in the GA, which exponentially decreased search time. "]))],function(l,n){l(n,32,0,"true","tertiary","draft.docx","assets/loco/draft.docx"),l(n,54,0,"secondary"),l(n,58,0,"dark"),l(n,75,0,"secondary"),l(n,79,0,"dark"),l(n,93,0,"secondary"),l(n,97,0,"dark"),l(n,123,0,"secondary"),l(n,127,0,"dark"),l(n,141,0,"secondary"),l(n,145,0,"dark"),l(n,162,0,"none")},null)}function h(l){return t.Jb(0,[(l()(),t.tb(0,0,null,null,1,"app-locomotion",[],null,null,null,c,s)),t.sb(1,114688,null,0,o,[],null,null)],function(l,n){l(n,1,0)},null)}var d=t.pb("app-locomotion",o,h,{},{},[]),b=e("Ip0R"),m=e("gIcY"),p=e("ZYCi");e.d(n,"LocomotionPageModuleNgFactory",function(){return f});var f=t.qb(a,[],function(l){return t.Bb([t.Cb(512,t.j,t.bb,[[8,[i.a,d]],[3,t.j],t.x]),t.Cb(4608,b.j,b.i,[t.u,[2,b.p]]),t.Cb(4608,m.c,m.c,[]),t.Cb(4608,r.a,r.a,[t.z,t.g]),t.Cb(4608,r.Cb,r.Cb,[r.a,t.j,t.q]),t.Cb(4608,r.Fb,r.Fb,[r.a,t.j,t.q]),t.Cb(1073742336,b.b,b.b,[]),t.Cb(1073742336,m.b,m.b,[]),t.Cb(1073742336,m.a,m.a,[]),t.Cb(1073742336,r.Ab,r.Ab,[]),t.Cb(1073742336,p.o,p.o,[[2,p.t],[2,p.m]]),t.Cb(1073742336,a,a,[]),t.Cb(1024,p.k,function(){return[[{path:"",component:o}]]},[])])})}}]);